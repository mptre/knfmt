commit 06d929a19074f42d81ed876d680d9486b5271762
Author: kn <kn@openbsd.org>
Date:   Thu Jul 22 15:32:51 2021 +0000

    Send rDNS proposals on ramdisks
    
    Otherwise resolvd(8) will never learn nameservers and update
    /etc/resolv.conf with IPv6 resolvers.
    
    At the moment IPv6 only installations always prompt for nameservers
    anyway, but that is its own bug and will be fixed soon.
    
    This enables the upcoming fix to detect learned nameservers in the
    first place.
    
    Feedback OK florian

diff --git sbin/slaacd/slaacd.c sbin/slaacd/slaacd.c
index dbd06d6ad79..c01300fbc24 100644
--- diff-024.c
+++ diff-024.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: slaacd.c,v 1.61 2021/07/21 03:53:50 kn Exp $	*/
+/*	$OpenBSD: slaacd.c,v 1.62 2021/07/22 15:32:51 kn Exp $	*/
 
 /*
  * Copyright (c) 2017 Florian Obser <florian@openbsd.org>
@@ -75,9 +75,7 @@ void	delete_address(struct imsg_configure_address *);
 void	configure_gateway(struct imsg_configure_dfr *, uint8_t);
 void	add_gateway(struct imsg_configure_dfr *);
 void	delete_gateway(struct imsg_configure_dfr *);
-#ifndef	SMALL
 void	send_rdns_proposal(struct imsg_propose_rdns *);
-#endif	/* SMALL */
 int	get_soiikey(uint8_t *);
 
 static int	main_imsg_send_ipc_sockets(struct imsgbuf *, struct imsgbuf *);
@@ -132,8 +130,8 @@ main(int argc, char *argv[])
 	int			 frontend_routesock, rtfilter, lockfd;
 	int			 rtable_any = RTABLE_ANY;
 	char			*csock = _PATH_SLAACD_SOCKET;
-#ifndef SMALL
 	struct imsg_propose_rdns rdns;
+#ifndef SMALL
 	int			 control_fd;
 #endif /* SMALL */
 
@@ -282,13 +280,11 @@ main(int argc, char *argv[])
 
 	main_imsg_compose_frontend(IMSG_STARTUP, -1, NULL, 0);
 
-#ifndef SMALL
 	/* we are taking over, clear all previos slaac proposals */
 	memset(&rdns, 0, sizeof(rdns));
 	rdns.if_index = 0;
 	rdns.rdns_count = 0;
 	send_rdns_proposal(&rdns);
-#endif /* SMALL */
 
 	event_dispatch();
 
@@ -471,9 +467,7 @@ main_dispatch_engine(int fd, short event, void *bula)
 	struct imsg			 imsg;
 	struct imsg_configure_address	 address;
 	struct imsg_configure_dfr	 dfr;
-#ifndef	SMALL
 	struct imsg_propose_rdns	 rdns;
-#endif	/* SMALL */
 	ssize_t				 n;
 	int				 shut = 0;
 
@@ -531,7 +525,6 @@ main_dispatch_engine(int fd, short event, void *bula)
 			memcpy(&dfr, imsg.data, sizeof(dfr));
 			delete_gateway(&dfr);
 			break;
-#ifndef	SMALL
 		case IMSG_PROPOSE_RDNS:
 			if (IMSG_DATA_SIZE(imsg) != sizeof(rdns))
 				fatalx("%s: IMSG_PROPOSE_RDNS wrong "
@@ -544,7 +537,6 @@ main_dispatch_engine(int fd, short event, void *bula)
 				    rdns.rdns_count);
 			send_rdns_proposal(&rdns);
 			break;
-#endif	/* SMALL */
 		default:
 			log_debug("%s: error handling imsg %d", __func__,
 			    imsg.hdr.type);
@@ -811,7 +803,6 @@ delete_gateway(struct imsg_configure_dfr *dfr)
 	configure_gateway(dfr, RTM_DELETE);
 }
 
-#ifndef	SMALL
 void
 send_rdns_proposal(struct imsg_propose_rdns *rdns)
 {
@@ -855,6 +846,7 @@ send_rdns_proposal(struct imsg_propose_rdns *rdns)
 		log_warn("failed to send route message");
 }
 
+#ifndef	SMALL
 const char*
 sin6_to_str(struct sockaddr_in6 *sin6)
 {
